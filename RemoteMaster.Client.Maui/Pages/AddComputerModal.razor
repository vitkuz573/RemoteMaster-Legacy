@using RemoteMaster.Client.Maui.Models
@using System.Collections.ObjectModel

<Modal @ref="_modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Add Computer</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Validations @ref="@_fluentValidations" Mode="ValidationMode.Manual" Model="@_newComputer" HandlerType="typeof(FluentValidationHandler)">
                <Validation>
                    <Field>
                        <FieldLabel>Name</FieldLabel>
                        <TextEdit @bind-Text="_newComputer.Name" Placeholder="Enter Computer Name">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>
                </Validation>
                <Validation>
                    <Field>
                        <FieldLabel>IP Address</FieldLabel>
                        <TextEdit @bind-Text="_newComputer.IPAddress" Placeholder="Enter IP Address">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>
                </Validation>
                <Field>
                    <FieldLabel>Parent Folder</FieldLabel>
                    <Select TValue="Guid?" @bind-Value="_selectedFolderId" Placeholder="Select Folder" SelectedValueChanged="@OnSelectedFolderChanged">
                        @foreach (var folder in Nodes.OfType<Folder>())
                        {
                            <SelectItem Value="@folder.NodeId">@folder.Name</SelectItem>
                        }
                    </Select>
                </Field>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="Hide">Close</Button>
            <Button Color="Color.Primary" Clicked="AddComputer">Add</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    public Modal _modalRef;
    public Computer _newComputer = new Computer();
    public Guid? _selectedFolderId;

    private Validations _fluentValidations;

    public void Show()
    {
        _modalRef.Show();
    }

    public void Hide()
    {
        _modalRef.Hide();
    }

    public async void AddComputer()
    {
        if (await _fluentValidations.ValidateAll())
        {
            var folder = Nodes.OfType<Folder>().FirstOrDefault(f => f.NodeId == _selectedFolderId);

            if (folder != null)
            {
                _newComputer.ParentId = folder.NodeId;
                folder.Children.Add(_newComputer);
            }

            _newComputer = new Computer();
            _selectedFolderId = null;
            Hide();
        }
    }

    private void OnSelectedFolderChanged(Guid? selectedId)
    {
        Console.WriteLine($"Selected folder ID changed to: {selectedId}");
        _selectedFolderId = selectedId;
    }

    [Parameter]
    public ObservableCollection<Node> Nodes { get; set; }
}

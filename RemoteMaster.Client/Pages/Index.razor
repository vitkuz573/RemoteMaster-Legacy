@page "/"
@using RemoteMaster.Client.Models
@using RemoteMaster.Client.Services
@using System.Collections.ObjectModel;
@inject ComputerService ComputerService

<Button Color="Color.Primary" Clicked="@SyncComputersFromAD">Sync Computers from AD</Button>

<p>@_syncStatus</p>

@if (_domainComputers != null && _domainComputers.Count > 0)
{
    <TreeView Nodes="_adNodes" GetChildNodes="@(node => (node as Folder)?.Children)" HasChildNodes="@(node => node is Folder)" @bind-SelectedNode="_selectedNode" @bind-ExpandedNodes="_expandedNodes">
        <NodeContent>
            <Icon Name="@((_expandedNodes.Contains(context) && context is Folder) ? context.ExpandedIcon : context.Icon)" />
            @context.Name
        </NodeContent>
    </TreeView>
}

<Button Color="Color.Primary" Clicked="@(() => _addFolderModalRef.Show())">Add Folder</Button>
<Button Color="Color.Primary" Clicked="@(() => _addComputerModalRef.Show())">Add Computer</Button>

<AddFolderModal @ref="_addFolderModalRef" OnAdd="AddFolder" />
<AddComputerModal @ref="_addComputerModalRef" Nodes="_nodes" OnAdd="AddComputer" />

<Row>
    <Column>
        <TreeView Nodes="_nodes" GetChildNodes="@(node => (node as Folder)?.Children)" HasChildNodes="@(node => node is Folder)" @bind-SelectedNode="_selectedNode" @bind-ExpandedNodes="_expandedNodes">
            <NodeContent>
                <Icon Name="@((_expandedNodes.Contains(context) && context is Folder) ? context.ExpandedIcon : context.Icon)" />
                @context.Name
            </NodeContent>
        </TreeView>
    </Column>

    <Column>
        @if (_selectedNode is Folder selectedFolder)
        {
            foreach (var child in selectedFolder.Children)
            {
                if (child is Computer computer)
                {
                    <a href="https://localhost:7111/@computer.IPAddress/control" target="_blank">
                        <div class="p-4 m-2 bg-white rounded-lg shadow-md flex items-center space-x-4">
                            <div class="flex-shrink-0">
                                <Icon Name="@computer.Icon" />
                            </div>
                            <div>
                                <div class="text-lg font-semibold text-gray-900">@computer.Name</div>
                                <p class="text-gray-600">IP: @computer.IPAddress</p>
                            </div>
                        </div>
                    </a>
                }
            }
        }
    </Column>
</Row>

@code {
    private ObservableCollection<Node> _nodes = new ObservableCollection<Node>();
    private IList<Node> _expandedNodes = new List<Node>();
    private Node _selectedNode;

    private ObservableCollection<Node> _adNodes = new ObservableCollection<Node>();

    private AddFolderModal _addFolderModalRef;
    private AddComputerModal _addComputerModalRef;

    private string _syncStatus;
    private IDictionary<string, List<Computer>> _domainComputers = new Dictionary<string, List<Computer>>();

    protected override async Task OnInitializedAsync()
    {
        var folders = ComputerService.GetFolders();

        foreach (var folder in folders)
        {
            _nodes.Add(folder);
        }
    }

    private void AddFolder(Folder folder)
    {
        ComputerService.AddNode(folder);
        _nodes.Add(folder);
    }

    private void AddComputer((Computer computer, Guid? folderId) data)
    {
        var (computer, folderId) = data;

        var folder = _nodes.OfType<Folder>().FirstOrDefault(f => f.NodeId == folderId);

        if (folder != null)
        {
            computer.ParentId = folder.NodeId;
            folder.Children.Add(computer);
            ComputerService.AddNode(computer);
        }
    }

    private async Task SyncComputersFromAD()
    {
        try
        {
            _domainComputers = await ComputerService.SyncComputersFromActiveDirectory();
            _syncStatus = "Sync has been completed successfully";

            // Очищаем коллекцию перед заполнением новыми данными
            _adNodes.Clear();

            // Преобразование _domainComputers в дерево и добавление его в _adNodes
            foreach (var ou in _domainComputers)
            {
                var folder = new Folder() { Name = ou.Key };
                foreach (var computer in ou.Value)
                {
                    folder.Children.Add(computer);
                }
                _adNodes.Add(folder);
            }
        }
        catch (Exception e)
        {
            _syncStatus = $"An error occurred during sync: {e.Message}";
        }
    }

    private RenderFragment RenderComputers(IDictionary<string, List<Computer>> computersDictionary, int level = 0) => builder =>
    {
        var seq = 0;

        foreach (var ou in computersDictionary)
        {
            builder.AddContent(seq++, new MarkupString($"<p style='margin-left: {20 * level}px'>{ou.Key}</p>"));

            foreach (var computer in ou.Value)
            {
                builder.AddContent(seq++, new MarkupString($"<p style='margin-left: {20 * (level + 1)}px'>{computer.Name}: {computer.IPAddress}</p>"));
            }
        }
    };
}

@page "/"
@using RemoteMaster.Client.Models
@using RemoteMaster.Client.Services
@using System.Collections.ObjectModel;
@inject ComputerService ComputerService

<EditForm Model="newFolder" OnValidSubmit="AddFolder">
    <Column>
        <Row>
            <Column ColumnSize="ColumnSize.Is6">
                <TextEdit @bind-Text="newFolder.Name" Placeholder="Enter Folder Name" />
            </Column>
        </Row>
        <Button Type="ButtonType.Submit" Color="Color.Primary">Add Folder</Button>
    </Column>
</EditForm>

<EditForm Model="newComputer" OnValidSubmit="AddComputer">
    <Column>
        <Row>
            <Column ColumnSize="ColumnSize.Is6">
                <TextEdit @bind-Text="newComputer.Name" Placeholder="Enter Computer Name" />
            </Column>
            <Column ColumnSize="ColumnSize.Is6">
                <TextEdit @bind-Text="newComputer.IPAddress" Placeholder="Enter IP Address" />
            </Column>
        </Row>
        <Select TValue="Folder" @bind-Value="selectedFolder" Placeholder="Select Folder">
            @foreach (var folder in Nodes.OfType<Folder>())
            {
                    <SelectItem Value="@folder">@folder.Name</SelectItem>
            }
        </Select>
        <Button Type="ButtonType.Submit" Color="Color.Primary">Add Computer</Button>
    </Column>
</EditForm>

<Row>
    <Column>
        <TreeView Nodes="Nodes" GetChildNodes="@(node => (node as Folder)?.Children)" HasChildNodes="@(node => node is Folder)" @bind-SelectedNode="selectedNode" @bind-ExpandedNodes="expandedNodes">
            <NodeContent>
                <Icon Name="@((expandedNodes.Contains(context) && context is Folder) ? context.ExpandedIcon : context.Icon)" />
                @context.Name
            </NodeContent>
        </TreeView>
    </Column>

    <Column>
        @if (selectedNode is Folder selectedFolder)
        {
            foreach (var child in selectedFolder.Children)
            {
                if (child is Computer computer)
                {
                    <a href="https://localhost:7111/@computer.IPAddress/control" target="_blank">
                        <div class="p-4 m-2 bg-white rounded-lg shadow-md flex items-center space-x-4">
                            <div class="flex-shrink-0">
                                <Icon Name="@computer.Icon" />
                            </div>
                            <div>
                                <div class="text-lg font-semibold text-gray-900">@computer.Name</div>
                                <p class="text-gray-600">IP: @computer.IPAddress</p>
                            </div>
                        </div>
                    </a>
                }
            }
        }
    </Column>
</Row>

@code {
    ObservableCollection<Node> Nodes = new ObservableCollection<Node>();
    IList<Node> expandedNodes = new List<Node>();
    Node selectedNode;
    Computer newComputer = new Computer();
    Folder newFolder = new Folder();
    Folder selectedFolder = null;

    protected override async Task OnInitializedAsync()
    {
        var folders = ComputerService.GetFolders();

        foreach (var folder in folders)
        {
            Nodes.Add(folder);
        }
    }

    private void AddFolder()
    {
        ComputerService.AddNode(newFolder);
        Nodes.Add(newFolder);
        newFolder = new Folder();
    }

    private void AddComputer()
    {
        if (selectedFolder == null)
            return;

        newComputer.ParentId = selectedFolder.NodeId;
        selectedFolder.Children.Add(newComputer);
        ComputerService.AddNode(newComputer);
        newComputer = new Computer();
        selectedFolder = null;
    }
}
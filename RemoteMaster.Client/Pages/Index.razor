@page "/"
@using RemoteMaster.Client.Models;

<Button Color="Color.Primary" Clicked="@SyncComputersFromAD">Sync Computers from AD</Button>

<SyncResultsModal @ref="_syncResultsModalRef" />

<Button Color="Color.Primary" Clicked="@(() => _addFolderModalRef.Show())">Add Folder</Button>
<Button Color="Color.Primary" Clicked="@(() => _addComputerModalRef.Show())">Add Computer</Button>

<AddFolderModal @ref="_addFolderModalRef" OnAdd="AddFolder" />
<AddComputerModal @ref="_addComputerModalRef" Nodes="_nodes" />

<Row>
    <Column>
        <TreeView Nodes="_nodes" GetChildNodes="@(node => (node as Folder)?.Children)" HasChildNodes="@(node => node is Folder)" @bind-SelectedNode="_selectedNode" @bind-ExpandedNodes="_expandedNodes">
            <NodeContent>
                <Icon Name="@((_expandedNodes.Contains(context) && context is Folder) ? context.ExpandedIcon : context.Icon)" />
                @context.Name
            </NodeContent>
        </TreeView>
    </Column>

    <Column>
        @if (_selectedNode is Folder selectedFolder)
        {
            foreach (var child in selectedFolder.Children)
            {
                if (child is Computer computer)
                {
                    <Card @onclick="(() => OpenCmdWithRemoteCommands(computer))">
                        <CardImage Source="/img/gallery/2.jpg" Alt="@computer.Name" />
                        <CardBody>
                            <CardTitle Size="3">
                                @computer.Name
                            </CardTitle>
                        </CardBody>
                    </Card>
                }
            }
        }
    </Column>
</Row>

<Snackbar @ref="_fetchComputersFromADStatusSnackbar" Color="SnackbarColor.Secondary">
    <SnackbarBody>
        @_fetchComputersFromADStatus
        <SnackbarAction Clicked="(() => _fetchComputersFromADStatusSnackbar.Hide())">Hide</SnackbarAction>
    </SnackbarBody>
</Snackbar>
@page "/"
@using RemoteMaster.Client.Models
@using RemoteMaster.Client.Services
@using System.Collections.ObjectModel
@inject ComputerService ComputerService
@inject IJSRuntime JsRuntime

<Button Color="Color.Primary" Clicked="@SyncComputersFromAD">Sync Computers from AD</Button>

<SyncResultsModal @ref="_syncResultsModalRef" />

<Button Color="Color.Primary" Clicked="@(() => _addFolderModalRef.Show())">Add Folder</Button>
<Button Color="Color.Primary" Clicked="@(() => _addComputerModalRef.Show())">Add Computer</Button>

<AddFolderModal @ref="_addFolderModalRef" OnAdd="AddFolder" />
<AddComputerModal @ref="_addComputerModalRef" Nodes="_nodes" />

<Row>
    <Column>
        <TreeView Nodes="_nodes" GetChildNodes="@(node => (node as Folder)?.Children)" HasChildNodes="@(node => node is Folder)" @bind-SelectedNode="_selectedNode" @bind-ExpandedNodes="_expandedNodes">
            <NodeContent>
                <Icon Name="@((_expandedNodes.Contains(context) && context is Folder) ? context.ExpandedIcon : context.Icon)" />
                @context.Name
            </NodeContent>
        </TreeView>
    </Column>

    <Column>
        @if (_selectedNode is Folder selectedFolder)
        {
            foreach (var child in selectedFolder.Children)
            {
                if (child is Computer computer)
                {
                    <Card @onclick="(() => OpenInNewTab(computer))">
                        <CardImage Source="/img/gallery/2.jpg" Alt="@computer.Name" />
                        <CardBody>
                            <CardTitle Size="3">
                                @computer.Name
                            </CardTitle>
                        </CardBody>
                    </Card>
                }
            }
        }
    </Column>
</Row>

@code {
    private ObservableCollection<Node> _nodes = new ObservableCollection<Node>();
    private IList<Node> _expandedNodes = new List<Node>();
    private Node _selectedNode;

    private ObservableCollection<Node> _adNodes = new ObservableCollection<Node>();

    private AddFolderModal _addFolderModalRef;
    private AddComputerModal _addComputerModalRef;
    private SyncResultsModal _syncResultsModalRef;

    private string _syncStatus;
    private IDictionary<string, List<Computer>> _domainComputers = new Dictionary<string, List<Computer>>();

    protected override async Task OnInitializedAsync()
    {
        var folders = ComputerService.GetFolders();

        foreach (var folder in folders)
        {
            _nodes.Add(folder);
        }
    }

    private void AddFolder(Folder folder)
    {
        ComputerService.AddNode(folder);
        _nodes.Add(folder);
    }

    private async Task SyncComputersFromAD()
    {
        try
        {
            _domainComputers = await ComputerService.SyncComputersFromActiveDirectory();
            _syncStatus = "Sync has been completed successfully";

            _adNodes.Clear();

            foreach (var ou in _domainComputers)
            {
                var folder = new Folder(ou.Key);

                foreach (var computer in ou.Value)
                {
                    folder.Children.Add(computer);
                }

                _adNodes.Add(folder);
            }

            _syncResultsModalRef.Show(_adNodes);
        }
        catch (Exception e)
        {
            _syncStatus = $"An error occurred during sync: {e.Message}";
        }
    }

    private async Task OpenInNewTab(Computer computer)
    {
        var url = $"https://localhost:7111/{computer.IPAddress}/control";
        await JsRuntime.InvokeVoidAsync("openInNewTab", url);
    }
}

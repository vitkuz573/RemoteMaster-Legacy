@page "/"
@using RemoteMaster.Client.Models
@using RemoteMaster.Client.Services
@using System.Collections.ObjectModel;
@inject ComputerService ComputerService

<Button Color="Color.Primary" Clicked="@(() => AddFolderModalRef.Show())">Add Folder</Button>
<Button Color="Color.Primary" Clicked="@(() => AddComputerModalRef.Show())">Add Computer</Button>

<AddFolderModal @ref="AddFolderModalRef" OnAdd="AddFolder" />
<AddComputerModal @ref="AddComputerModalRef" Nodes="Nodes" OnAdd="AddComputer" />

<Row>
    <Column>
        <TreeView Nodes="Nodes" GetChildNodes="@(node => (node as Folder)?.Children)" HasChildNodes="@(node => node is Folder)" @bind-SelectedNode="_selectedNode" @bind-ExpandedNodes="expandedNodes">
            <NodeContent>
                <Icon Name="@((expandedNodes.Contains(context) && context is Folder) ? context.ExpandedIcon : context.Icon)" />
                @context.Name
            </NodeContent>
        </TreeView>
    </Column>

    <Column>
        @if (_selectedNode is Folder selectedFolder)
        {
            foreach (var child in selectedFolder.Children)
            {
                if (child is Computer computer)
                {
                    <a href="https://localhost:7111/@computer.IPAddress/control" target="_blank">
                        <div class="p-4 m-2 bg-white rounded-lg shadow-md flex items-center space-x-4">
                            <div class="flex-shrink-0">
                                <Icon Name="@computer.Icon" />
                            </div>
                            <div>
                                <div class="text-lg font-semibold text-gray-900">@computer.Name</div>
                                <p class="text-gray-600">IP: @computer.IPAddress</p>
                            </div>
                        </div>
                    </a>
                }
            }
        }
    </Column>
</Row>

@code {
    ObservableCollection<Node> Nodes = new ObservableCollection<Node>();
    IList<Node> expandedNodes = new List<Node>();
    Node _selectedNode;

    AddFolderModal AddFolderModalRef;
    AddComputerModal AddComputerModalRef;

    protected override async Task OnInitializedAsync()
    {
        var folders = ComputerService.GetFolders();

        foreach (var folder in folders)
        {
            Nodes.Add(folder);
        }
    }

    private void AddFolder(Folder folder)
    {
        ComputerService.AddNode(folder);
        Nodes.Add(folder);
    }

    private void AddComputer((Computer computer, Guid? folderId) data)
    {
        var (computer, folderId) = data;

        var folder = Nodes.OfType<Folder>().FirstOrDefault(f => f.NodeId == folderId);
        if (folder != null)
        {
            computer.ParentId = folder.NodeId;
            folder.Children.Add(computer);
            ComputerService.AddNode(computer);
        }
    }
}

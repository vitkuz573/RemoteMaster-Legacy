@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace RemoteMaster.Client.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="RemoteMaster.Client.styles.css" rel="stylesheet" />

    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&amp;display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/flowbite@1.5.4/dist/flowbite.min.css" />
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css" />

    <script src="https://cdn.tailwindcss.com"></script>
    <script src="_content/Blazorise.Tailwind/blazorise.tailwind.config.js?v=1.2.4.0"></script>

    <link href="_content/Blazorise/blazorise.css" rel="stylesheet" />
    <link href="_content/Blazorise.Tailwind/blazorise.tailwind.css" rel="stylesheet" />

    <link href="_content/Blazorise.TreeView/blazorise.treeview.css" rel="stylesheet" />

    <link href="_content/Blazorise.Snackbar/blazorise.snackbar.css" rel="stylesheet" />

    <link rel="icon" type="image/png" href="favicon.png"/>
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>

    <script type="module">
        import DragSelect from 'https://unpkg.com/dragselect@latest/dist/ds.es6m.min.js'

        window.openInNewTab = (url) => {
            window.open(url, '_blank');
        };

        window.revokeUrl = function (url) {
            URL.revokeObjectURL(url);
        }

        window.createImageBlobUrl = function (data) {
            const blob = new Blob([data], { type: 'image/jpeg' });
            return URL.createObjectURL(blob);
        }

        window.addKeyDownEventListener = (dotnetHelper) => {
            window.onkeydown = (e) => {
                dotnetHelper.invokeMethodAsync('OnKeyDown', e.keyCode);
            };
        };

        window.addKeyUpEventListener = (dotnetHelper) => {
            window.onkeyup = (e) => {
                dotnetHelper.invokeMethodAsync('OnKeyUp', e.keyCode);
            };
        };

        window.disableContextMenuOnImage = () => {
            document.getElementById('screenImage').addEventListener('contextmenu', (event) => {
                event.preventDefault();
            });
        };

        window.setTitle = (title) => {
            document.title = title;
        }

        window.selectedIPs = [];

        const ds = new DragSelect({
            selectables: document.getElementsByClassName('selectable-nodes'),
            area: document.querySelector('#container')
        });

        ds.subscribe('callback', (e) => {
            var selectedItems = e.items;
            var ipAddresses = Array.from(selectedItems).map(item => item.getAttribute('data-ip-address'));

            // сохраняем выбранные IP в глобальную переменную
            window.selectedIPs = ipAddresses;
        });

        window.openTabs = () => {
            let blockedPopups = false;
            window.selectedIPs.forEach(ipAddress => {
                var url = `http://localhost:5254/${ipAddress}/control`;
                const popupWindow = window.open(url, '_blank');
                if (!popupWindow || popupWindow.closed || typeof popupWindow.closed === 'undefined') {
                    blockedPopups = true;
                }
            });

            if (blockedPopups) {
                const confirmationMessage = `Всплывающие окна были заблокированы. Пожалуйста, разрешите их для сайта и повторите попытку.`;
                alert(confirmationMessage);
            }
        };
    </script>
</body>
</html>

@page "/{IPAddress}/control"
@inject ILogger<Control> Logger

@code {
    [Parameter]
    public string IPAddress { get; set; }

    private HubConnection? _hubConnection;
    private string? _statusMessage;
    private string? _screenDataUrl;

    protected override async Task OnInitializedAsync()
    {
        if (IPAddress != null && _hubConnection == null)
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl($"http://{IPAddress}:5076/controlHub")
                .WithAutomaticReconnect(new RetryPolicy())
                .Build();

            _hubConnection.On<byte[]>("ScreenUpdate", (screenData) =>
            {
                _screenDataUrl = $"data:image/png;base64,{Convert.ToBase64String(screenData)}";
                _statusMessage = null;
                InvokeAsync(StateHasChanged);
            });

            await _hubConnection.StartAsync();
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}

@if (_hubConnection != null)
{
    @switch (_hubConnection.State)
    {
        case HubConnectionState.Disconnected:
        case HubConnectionState.Connecting:
        case HubConnectionState.Reconnecting:
            <p>@_statusMessage</p>
            break;
        case HubConnectionState.Connected:
            if (string.IsNullOrEmpty(_screenDataUrl))
            {
                <p>Connection started successfully, waiting for screen update...</p>
            }
            else
            {
                <img src="@_screenDataUrl" width="1494" />
            }
            break;
    }
}
else
{
    <p>Establishing connection...</p>
}
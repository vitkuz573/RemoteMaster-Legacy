@page "/{IPAddress}/control"
@using RemoteMaster.Client.Models
@inject ILogger<Computer> Logger

@code {
    [Parameter]
    public string IPAddress { get; set; }

    private HubConnection? hubConnection;
    private string? statusMessage;
    private string? screenDataUrl;
    private TimeSpan[] retryIntervals = new[]
    {
        TimeSpan.Zero,
        TimeSpan.FromSeconds(2),
        TimeSpan.FromSeconds(5),
        TimeSpan.FromSeconds(10),
        TimeSpan.FromSeconds(15)
    };
    private int retryAttempt = 0;

    protected override async Task OnInitializedAsync()
    {
        if (IPAddress != null && hubConnection == null)
        {
            var serverUrl = $"https://{IPAddress}:7172/screenHub?screenId={IPAddress}";

            hubConnection = new HubConnectionBuilder()
                .WithUrl(serverUrl, options =>
                {
                    options.HttpMessageHandlerFactory = _ => new HttpClientHandler
                    {
                        ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
                    };
                })
                .WithAutomaticReconnect(retryIntervals)
                .Build();

            hubConnection.On<byte[]>("ScreenUpdate", HandleScreenUpdate);

            hubConnection.Closed += error =>
            {
                statusMessage = $"Server connection lost. Exception: {error?.Message}";
                Logger.LogWarning(statusMessage);

                return InvokeAsync(StateHasChanged);
            };

            hubConnection.Reconnecting += error =>
            {
                retryAttempt++;
                var nextRetryInterval = retryAttempt < retryIntervals.Length ? retryIntervals[retryAttempt] : retryIntervals[^1];
                statusMessage = $"Connection lost, attempting to reconnect in {nextRetryInterval.TotalSeconds} seconds...";
                InvokeAsync(StateHasChanged);

                return Task.CompletedTask;
            };

            hubConnection.Reconnected += connectionId =>
            {
                retryAttempt = 0;
                statusMessage = $"Connection reestablished, connection Id: {connectionId}";
                InvokeAsync(StateHasChanged);

                return Task.CompletedTask;
            };

            try
            {
                await hubConnection.StartAsync();
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                statusMessage = $"Error starting connection: {ex.Message}";
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private void HandleScreenUpdate(byte[] screenData)
    {
        screenDataUrl = $"data:image/png;base64,{Convert.ToBase64String(screenData)}";
        statusMessage = null;
        InvokeAsync(StateHasChanged);
    }

    public async Task DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

@if (hubConnection != null)
{
    @switch (hubConnection.State)
    {
        case HubConnectionState.Disconnected:
        case HubConnectionState.Connecting:
        case HubConnectionState.Reconnecting:
            <p>@statusMessage</p>
            break;
        case HubConnectionState.Connected:
            if (string.IsNullOrEmpty(screenDataUrl))
            {
                <p>Connection started successfully, waiting for screen update...</p>
            }
            else
            {
                <img src="@screenDataUrl" width="1494" />
            }
            break;
    }
}
else
{
    <p>Establishing connection...</p>
}

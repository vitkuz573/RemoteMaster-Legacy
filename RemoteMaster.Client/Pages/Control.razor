@page "/{IPAddress}/control"
@using Microsoft.AspNetCore.SignalR.Client
@using RemoteMaster.Client.Models
@using RemoteMaster.Client.Services
@using System.Text.Json
@using Size = System.Drawing.Size
@inject ComputerService ComputerService
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<Computer> Logger

@code {
    [Parameter]
    public string IPAddress { get; set; }

    private HubConnection hubConnection;
    private string statusMessage;
    private string screenDataUrl;
    private Computer managedComputer;
    private Size virtualScreenSize;

    protected override async Task OnInitializedAsync()
    {
        managedComputer = ComputerService.GetComputerByIp(IPAddress);
        virtualScreenSize = await GetVirtualScreenSizeAsync();

        if (managedComputer != null && hubConnection == null)
        {
            var serverUrl = $"https://{IPAddress}:7172/screenHub?screenId={IPAddress}";

            hubConnection = new HubConnectionBuilder()
                .WithUrl(serverUrl, options =>
                {
                    options.HttpMessageHandlerFactory = _ => new HttpClientHandler
                        {
                            ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
                        };
                })
                .WithAutomaticReconnect(new[]
                {
                    TimeSpan.Zero,
                    TimeSpan.FromSeconds(2),
                    TimeSpan.FromSeconds(5),
                    TimeSpan.FromSeconds(10),
                    TimeSpan.FromSeconds(15)
                })
                .Build();

            hubConnection.On<byte[]>("ScreenUpdate", HandleScreenUpdate);
            hubConnection.Closed += HubConnectionClosed;
            hubConnection.Reconnecting += error =>
            {
                statusMessage = $"Connection lost, attempting to reconnect...";
                InvokeAsync(StateHasChanged);
                return Task.CompletedTask;
            };
            hubConnection.Reconnected += connectionId =>
            {
                statusMessage = $"Connection reestablished, connection Id: {connectionId}";
                InvokeAsync(StateHasChanged);
                return Task.CompletedTask;
            };

            try
            {
                await hubConnection.StartAsync();
                InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                statusMessage = $"Error starting connection: {ex.Message}";
                InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task<Size> GetVirtualScreenSizeAsync()
    {
        var client = HttpClientFactory.CreateClient("ClientWithDisabledCertificateCheck");
        var response = await client.GetAsync($"https://{IPAddress}:7172/api/screen/size/virtual");
        var responseString = await response.Content.ReadAsStringAsync();
        return DeserializeScreenSize(responseString);
    }

    private Size DeserializeScreenSize(string responseString)
    {
        return JsonSerializer.Deserialize<Size>(responseString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }

    private void HandleScreenUpdate(byte[] screenData)
    {
        screenDataUrl = $"data:image/png;base64,{Convert.ToBase64String(screenData)}";
        statusMessage = null;
        InvokeAsync(StateHasChanged);
    }

    private Task HubConnectionClosed(Exception? arg)
    {
        statusMessage = "Server connection lost.";
        Logger.LogWarning(statusMessage);
        return InvokeAsync(StateHasChanged);
    }

    public async Task DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

@if (hubConnection != null)
{
    @switch (hubConnection.State)
    {
        case HubConnectionState.Disconnected:
            <p>@statusMessage</p>
            break;
        case HubConnectionState.Connecting:
        case HubConnectionState.Reconnecting:
            <p>Establishing connection...</p>
            break;
        case HubConnectionState.Connected:
            if (string.IsNullOrEmpty(screenDataUrl))
            {
                <p>Connection started successfully, waiting for screen update...</p>
            }
            else
            {
                <img src="@screenDataUrl" width="1494" />
            }
            break;
    }
}
else
{
    <p>Establishing connection...</p>
}

@if (virtualScreenSize != null)
{
    <p>Virtual screen size: Width: @virtualScreenSize.Width, Height: @virtualScreenSize.Height</p>
}

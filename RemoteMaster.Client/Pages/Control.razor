@page "/{IPAddress}/control"
@using RemoteMaster.Client.Models
@using RemoteMaster.Shared.Dto;
@inject ILogger<Computer> Logger

@code {
    [Parameter]
    public string IPAddress { get; set; }

    private HubConnection? _hubConnection;
    private string? _controlId;
    private string? _statusMessage;
    private string? _screenDataUrl;
    private TimeSpan[] _retryIntervals = new[]
    {
        TimeSpan.Zero,
        TimeSpan.FromSeconds(2),
        TimeSpan.FromSeconds(5),
        TimeSpan.FromSeconds(10),
        TimeSpan.FromSeconds(15)
    };
    private int _retryAttempt = 0;

    protected override async Task OnInitializedAsync()
    {
        if (IPAddress != null && _hubConnection == null)
        {
            _controlId = Guid.NewGuid().ToString();
            var serverUrl = $"https://{IPAddress}:7172/controlHub";

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(serverUrl, options =>
                {
                    options.Headers["controlId"] = _controlId;

                    options.HttpMessageHandlerFactory = _ => new HttpClientHandler
                        {
                            ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
                        };
                })
                .WithAutomaticReconnect(_retryIntervals)
                .Build();

            _hubConnection.On<byte[]>("ScreenUpdate", HandleScreenUpdate);

            _hubConnection.Closed += error =>
            {
                _statusMessage = $"Server connection lost. Exception: {error?.Message}";
                Logger.LogWarning(_statusMessage);

                return InvokeAsync(StateHasChanged);
            };

            _hubConnection.Reconnecting += error =>
            {
                _retryAttempt++;
                var nextRetryInterval = _retryAttempt < _retryIntervals.Length ? _retryIntervals[_retryAttempt] : _retryIntervals[^1];
                _statusMessage = $"Connection lost, attempting to reconnect in {nextRetryInterval.TotalSeconds} seconds...";
                InvokeAsync(StateHasChanged);

                return Task.CompletedTask;
            };

            _hubConnection.Reconnected += connectionId =>
            {
                _retryAttempt = 0;
                _statusMessage = $"Connection reestablished, connection Id: {connectionId}";
                InvokeAsync(StateHasChanged);

                return Task.CompletedTask;
            };

            try
            {
                await _hubConnection.StartAsync();
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                _statusMessage = $"Error starting connection: {ex.Message}";
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private void HandleScreenUpdate(byte[] screenData)
    {
        _screenDataUrl = $"data:image/png;base64,{Convert.ToBase64String(screenData)}";
        _statusMessage = null;
        InvokeAsync(StateHasChanged);
    }

    public async Task DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    private async Task SendCursorPosition(int x, int y)
    {
        Console.WriteLine($"About to call SendAsync with cursor position: ({x}, {y})");

        if (_hubConnection != null && _hubConnection.State == HubConnectionState.Connected)
        {
            var cursorPosition = new CursorPositionDto { X = x, Y = y };
            await _hubConnection.SendAsync("SendCursorPosition", _controlId, cursorPosition);
        }

        Console.WriteLine($"Called SendAsync with cursor position: ({x}, {y})");
    }

    private async Task HandleMouseMove(MouseEventArgs e)
    {
        Console.WriteLine($"Mouse moved to: ({e.ClientX}, {e.ClientY})");
        await SendCursorPosition((int)e.ClientX, (int)e.ClientY);
    }
}

@if (_hubConnection != null)
{
    @switch (_hubConnection.State)
    {
        case HubConnectionState.Disconnected:
        case HubConnectionState.Connecting:
        case HubConnectionState.Reconnecting:
            <p>@_statusMessage</p>
            break;
        case HubConnectionState.Connected:
            if (string.IsNullOrEmpty(_screenDataUrl))
            {
                <p>Connection started successfully, waiting for screen update...</p>
            }
            else
            {
                <img src="@_screenDataUrl" width="1494" @onmousemove="HandleMouseMove" />
            }
            break;
    }
}
else
{
    <p>Establishing connection...</p>
}
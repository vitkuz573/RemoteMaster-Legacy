@layout EmptyLayout
@page "/{ipAddress}/screen"


@using Microsoft.AspNetCore.SignalR.Client
@using RemoteMaster.Client.Models

@inject NavigationManager NavigationManager

@code {
    [Parameter]
    public string IPAddress { get; set; }

    private HubConnection hubConnection;
    private string serverUrl;
    private string connectionError;
    private string screenDataUrl;
    private bool isConnectionStarted = false;

    protected override async Task OnInitializedAsync()
    {
        serverUrl = $"https://{IPAddress}:7172/screenHub?ipAddress={IPAddress}";
        hubConnection = new HubConnectionBuilder()
            .WithUrl(serverUrl, options =>
            {
                options.HttpMessageHandlerFactory = _ => new HttpClientHandler
                    {
                        ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
                    };
            })
            .Build();

        hubConnection.On<byte[]>("ScreenUpdate", HandleScreenUpdate);

        try
        {
            await hubConnection.StartAsync();
            isConnectionStarted = true;
        }
        catch (Exception ex)
        {
            connectionError = $"Error starting connection: {ex.Message}";
        }
    }

    private void HandleScreenUpdate(byte[] screenData)
    {
        screenDataUrl = $"data:image/png;base64,{Convert.ToBase64String(screenData)}";
        StateHasChanged();
    }

    public void Dispose()
    {
        hubConnection?.DisposeAsync();
    }
}

@if (!string.IsNullOrEmpty(connectionError))
{
    <p>@connectionError</p>
}
else if (isConnectionStarted && !string.IsNullOrEmpty(screenDataUrl))
{
    <img src="@screenDataUrl" width="100%" />
}
else if (isConnectionStarted)
{
    <p>Connection started successfully, waiting for screen update...</p>
}
else
{
    <p>Establishing connection...</p>
}

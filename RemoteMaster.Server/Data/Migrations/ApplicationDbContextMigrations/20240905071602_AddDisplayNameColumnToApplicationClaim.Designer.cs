// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RemoteMaster.Server.Data;

#nullable disable

namespace RemoteMaster.Server.Data.Migrations.ApplicationDbContextMigrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240905071602_AddDisplayNameColumnToApplicationClaim")]
    partial class AddDisplayNameColumnToApplicationClaim
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RemoteMaster.Server.Aggregates.ApplicationClaimAggregate.ApplicationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(1);

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(4);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.ToTable("ApplicationClaims");
                });

            modelBuilder.Entity("RemoteMaster.Server.Aggregates.ApplicationUserAggregate.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("CanAccessUnregisteredHosts")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.HasTrigger("AspNetUsers_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("RemoteMaster.Server.Aggregates.ApplicationUserAggregate.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ReplacedByTokenId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("ReplacedByTokenId")
                        .IsUnique()
                        .HasFilter("[ReplacedByTokenId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", null, t =>
                        {
                            t.HasCheckConstraint("CK_RefreshTokens_ReplacedByTokenId_Required", "[RevocationReason] <> 'Replaced' OR [ReplacedByTokenId] IS NOT NULL");
                        });
                });

            modelBuilder.Entity("RemoteMaster.Server.Aggregates.ApplicationUserAggregate.SignInEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnOrder(4);

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("SignInTime")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(2);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SignInEntries");
                });

            modelBuilder.Entity("RemoteMaster.Server.Aggregates.OrganizationAggregate.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("RemoteMaster.Server.Aggregates.OrganizationAggregate.UserOrganization", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrganizationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOrganizations", (string)null);
                });

            modelBuilder.Entity("RemoteMaster.Server.Aggregates.OrganizationalUnitAggregate.Computer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnOrder(2);

                    b.Property<string>("MacAddress")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(1);

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MacAddress")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("Computers");
                });

            modelBuilder.Entity("RemoteMaster.Server.Aggregates.OrganizationalUnitAggregate.OrganizationalUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(1);

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(3);

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ParentId");

                    b.HasIndex("Name", "OrganizationId")
                        .IsUnique();

                    b.ToTable("OrganizationalUnits");
                });

            modelBuilder.Entity("RemoteMaster.Server.Aggregates.OrganizationalUnitAggregate.UserOrganizationalUnit", b =>
                {
                    b.Property<Guid>("OrganizationalUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrganizationalUnitId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOrganizationalUnits", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RemoteMaster.Server.Aggregates.ApplicationUserAggregate.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RemoteMaster.Server.Aggregates.ApplicationUserAggregate.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RemoteMaster.Server.Aggregates.ApplicationUserAggregate.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RemoteMaster.Server.Aggregates.ApplicationUserAggregate.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RemoteMaster.Server.Aggregates.ApplicationUserAggregate.RefreshToken", b =>
                {
                    b.HasOne("RemoteMaster.Server.Aggregates.ApplicationUserAggregate.RefreshToken", "ReplacedByToken")
                        .WithOne()
                        .HasForeignKey("RemoteMaster.Server.Aggregates.ApplicationUserAggregate.RefreshToken", "ReplacedByTokenId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RemoteMaster.Server.Aggregates.ApplicationUserAggregate.ApplicationUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("RemoteMaster.Server.Aggregates.ApplicationUserAggregate.ValueObjects.TokenRevocationInfo", "RevocationInfo", b1 =>
                        {
                            b1.Property<int>("RefreshTokenId")
                                .HasColumnType("int");

                            b1.Property<string>("RevocationReason")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("RevocationReason")
                                .HasColumnOrder(8);

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("datetime2")
                                .HasColumnName("Revoked")
                                .HasColumnOrder(6);

                            b1.Property<string>("RevokedByIp")
                                .HasMaxLength(45)
                                .HasColumnType("nvarchar(45)")
                                .HasColumnName("RevokedByIp")
                                .HasColumnOrder(7);

                            b1.HasKey("RefreshTokenId");

                            b1.HasIndex("Revoked");

                            b1.ToTable("RefreshTokens");

                            b1.WithOwner()
                                .HasForeignKey("RefreshTokenId");
                        });

                    b.OwnsOne("RemoteMaster.Server.Aggregates.ApplicationUserAggregate.ValueObjects.TokenValue", "TokenValue", b1 =>
                        {
                            b1.Property<int>("RefreshTokenId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Created")
                                .HasColumnType("datetime2")
                                .HasColumnName("Created")
                                .HasColumnOrder(4);

                            b1.Property<string>("CreatedByIp")
                                .IsRequired()
                                .HasMaxLength(45)
                                .HasColumnType("nvarchar(45)")
                                .HasColumnName("CreatedByIp")
                                .HasColumnOrder(5);

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("datetime2")
                                .HasColumnName("Expires")
                                .HasColumnOrder(3);

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("Token")
                                .HasColumnOrder(2);

                            b1.HasKey("RefreshTokenId");

                            b1.HasIndex("Expires");

                            b1.ToTable("RefreshTokens");

                            b1.WithOwner()
                                .HasForeignKey("RefreshTokenId");
                        });

                    b.Navigation("ReplacedByToken");

                    b.Navigation("RevocationInfo");

                    b.Navigation("TokenValue")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RemoteMaster.Server.Aggregates.ApplicationUserAggregate.SignInEntry", b =>
                {
                    b.HasOne("RemoteMaster.Server.Aggregates.ApplicationUserAggregate.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RemoteMaster.Server.Aggregates.OrganizationAggregate.Organization", b =>
                {
                    b.OwnsOne("RemoteMaster.Server.Aggregates.OrganizationAggregate.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("OrganizationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Country")
                                .HasColumnOrder(4);

                            b1.Property<string>("Locality")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Locality")
                                .HasColumnOrder(2);

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("State")
                                .HasColumnOrder(3);

                            b1.HasKey("OrganizationId");

                            b1.HasIndex("Locality", "State", "Country");

                            b1.ToTable("Organizations");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("RemoteMaster.Server.Aggregates.OrganizationAggregate.UserOrganization", b =>
                {
                    b.HasOne("RemoteMaster.Server.Aggregates.OrganizationAggregate.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RemoteMaster.Server.Aggregates.ApplicationUserAggregate.ApplicationUser", "ApplicationUser")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("RemoteMaster.Server.Aggregates.OrganizationalUnitAggregate.Computer", b =>
                {
                    b.HasOne("RemoteMaster.Server.Aggregates.OrganizationalUnitAggregate.OrganizationalUnit", "Parent")
                        .WithMany("Computers")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("RemoteMaster.Server.Aggregates.OrganizationalUnitAggregate.OrganizationalUnit", b =>
                {
                    b.HasOne("RemoteMaster.Server.Aggregates.OrganizationAggregate.Organization", "Organization")
                        .WithMany("OrganizationalUnits")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RemoteMaster.Server.Aggregates.OrganizationalUnitAggregate.OrganizationalUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Organization");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("RemoteMaster.Server.Aggregates.OrganizationalUnitAggregate.UserOrganizationalUnit", b =>
                {
                    b.HasOne("RemoteMaster.Server.Aggregates.OrganizationalUnitAggregate.OrganizationalUnit", "OrganizationalUnit")
                        .WithMany("UserOrganizationalUnits")
                        .HasForeignKey("OrganizationalUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RemoteMaster.Server.Aggregates.ApplicationUserAggregate.ApplicationUser", "ApplicationUser")
                        .WithMany("UserOrganizationalUnits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("OrganizationalUnit");
                });

            modelBuilder.Entity("RemoteMaster.Server.Aggregates.ApplicationUserAggregate.ApplicationUser", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserOrganizationalUnits");

                    b.Navigation("UserOrganizations");
                });

            modelBuilder.Entity("RemoteMaster.Server.Aggregates.OrganizationAggregate.Organization", b =>
                {
                    b.Navigation("OrganizationalUnits");

                    b.Navigation("UserOrganizations");
                });

            modelBuilder.Entity("RemoteMaster.Server.Aggregates.OrganizationalUnitAggregate.OrganizationalUnit", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Computers");

                    b.Navigation("UserOrganizationalUnits");
                });
#pragma warning restore 612, 618
        }
    }
}

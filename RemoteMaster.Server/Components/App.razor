<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="google" content="notranslate">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="RemoteMaster.Server.styles.css" />
    <link rel="stylesheet" href="main.output.css" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <HeadOutlet />
</head>

<body class="select-none">
    <Routes />
    <script src="_framework/blazor.web.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
    <script type="text/javascript" src="lib/davidshimjs-qrcodejs/qrcode.js"></script>
    <script type="text/javascript" src="js/qr.js"></script>
    <script src="js/preventDrawer.js"></script>
    <script src="js/dialogInterop.js"></script>

    <script>
        window.revokeUrl = URL.revokeObjectURL;

        window.createObjectBlobUrl = function (data, type) {
            return URL.createObjectURL(new Blob([data], { type: type }));
        }

        window.createImageBlobUrl = function (data) {
            return window.createObjectBlobUrl(data, 'image/jpeg');
        }

        window.openNewWindow = function (url, width, height) {
            var windowFeatures = 'toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,' +
                'width=' + width + ',height=' + height;
            return window.open(url, '_blank', windowFeatures);
        };

        window.addKeyDownEventListener = (dotnetHelper) => {
            window.onkeydown = (e) => {
                dotnetHelper.invokeMethodAsync('OnKeyDown', e.keyCode);
            };
        };

        window.addKeyUpEventListener = (dotnetHelper) => {
            window.onkeyup = (e) => {
                dotnetHelper.invokeMethodAsync('OnKeyUp', e.keyCode);
            };
        };

        window.addEventListener("keydown", function (e) {
            if (e.ctrlKey && e.which === 83) {
                e.preventDefault();
            }
        });

        window.addBeforeUnloadListener = (instance) => {
            window.addEventListener("beforeunload", function () {
                instance.invokeMethodAsync("OnBeforeUnload");
            });
        };

        window.generateAndDownloadFile = function (requestData) {
            const fileContent = JSON.stringify(requestData, null, 2);

            const blob = new Blob([fileContent], { type: 'application/json' });
            const url = window.URL.createObjectURL(blob);

            const a = document.createElement('a');
            a.href = url;
            a.download = 'RemoteMaster.Host.json';
            document.body.appendChild(a);
            a.click();
            a.remove();

            window.URL.revokeObjectURL(url);
        };

        window.generateAndDownloadResults = function (base64Data, fileName) {
            const blob = b64toBlob(base64Data, 'application/zip');
            const url = window.URL.createObjectURL(blob);

            const a = document.createElement('a');
            a.href = url;
            a.download = fileName;
            document.body.appendChild(a);
            a.click();
            a.remove();

            window.URL.revokeObjectURL(url);
        };

        function b64toBlob(b64Data, contentType = '', sliceSize = 512) {
            const byteCharacters = atob(b64Data);
            const byteArrays = [];

            for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
                const slice = byteCharacters.slice(offset, offset + sliceSize);

                const byteNumbers = new Array(slice.length);
                for (let i = 0; i < slice.length; i++) {
                    byteNumbers[i] = slice.charCodeAt(i);
                }

                const byteArray = new Uint8Array(byteNumbers);
                byteArrays.push(byteArray);
            }

            return new Blob(byteArrays, { type: contentType });
        }

        window.saveAsFile = function (filename, bytesBase64) {
            const blob = b64toBlob(bytesBase64, 'application/octet-stream');
            const url = window.URL.createObjectURL(blob);

            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            a.remove();

            window.URL.revokeObjectURL(url);
        };

        window.trackSelectedElements = function (selectableContainerId, dotNetHelper) {
            const container = document.getElementById(selectableContainerId);
            let startPoint = null;
            let selectionRect = null;
            let isCtrlPressed = false;

            function createRectFromPoints(p1, p2) {
                const x = Math.min(p1.x, p2.x);
                const y = Math.min(p1.y, p2.y);
                const width = Math.abs(p1.x - p2.x);
                const height = Math.abs(p1.y - p2.y);
                return { left: x, top: y, right: x + width, bottom: y + height };
            }

            function rectOverlap(rect1, rect2) {
                return !(rect1.right < rect2.left || rect1.left > rect2.right ||
                    rect1.bottom < rect2.top || rect1.top > rect2.bottom);
            }

            function updateElementSelection() {
                const elements = container.querySelectorAll('.selectable');
                elements.forEach(element => {
                    const elemRect = element.getBoundingClientRect();
                    if (rectOverlap(selectionRect, elemRect)) {
                        if (element.classList.contains('ring-2')) {
                            if (isCtrlPressed) {
                                element.classList.remove('ring-2', 'ring-blue-500', 'shadow-lg');
                            }
                        } else {
                            element.classList.add('ring-2', 'ring-blue-500', 'shadow-lg');
                        }
                    } else if (!isCtrlPressed) {
                        element.classList.remove('ring-2', 'ring-blue-500', 'shadow-lg');
                    }
                });
            }

            container.addEventListener('mousedown', (e) => {
                isCtrlPressed = e.ctrlKey;
                startPoint = { x: e.clientX, y: e.clientY };
                container.addEventListener('mousemove', onMouseMove);
            });

            container.addEventListener('mouseup', (e) => {
                container.removeEventListener('mousemove', onMouseMove);
                selectionRect = createRectFromPoints(startPoint, { x: e.clientX, y: e.clientY });
                updateElementSelection();
                dotNetHelper.invokeMethodAsync('UpdateSelectedElements', Array.from(container.querySelectorAll('.selectable.ring-2')).map(el => el.id));
                if (!isCtrlPressed) {
                    startPoint = null;
                    selectionRect = null;
                }
            });

            function onMouseMove(e) {
                if (!startPoint) return;
                selectionRect = createRectFromPoints(startPoint, { x: e.clientX, y: e.clientY });
                updateElementSelection();
            }

            container.addEventListener('touchstart', (e) => {
                isCtrlPressed = e.touches.length > 1;
                startPoint = { x: e.touches[0].clientX, y: e.touches[0].clientY };
                container.addEventListener('touchmove', onTouchMove);
            });

            container.addEventListener('touchend', (e) => {
                if (e.changedTouches && e.changedTouches.length > 0) {
                    container.removeEventListener('touchmove', onTouchMove);
                    selectionRect = createRectFromPoints(startPoint, { x: e.changedTouches[0].clientX, y: e.changedTouches[0].clientY });
                    updateElementSelection();
                    dotNetHelper.invokeMethodAsync('UpdateSelectedElements', Array.from(container.querySelectorAll('.selectable.ring-2')).map(el => el.id));
                }
                if (!isCtrlPressed) {
                    startPoint = null;
                    selectionRect = null;
                }
            });

            function onTouchMove(e) {
                if (!startPoint) return;
                selectionRect = createRectFromPoints(startPoint, { x: e.touches[0].clientX, y: e.touches[0].clientY });
                updateElementSelection();
            }
        }
    </script>
</body>

</html>

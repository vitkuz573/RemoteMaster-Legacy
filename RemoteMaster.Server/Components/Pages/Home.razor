@page "/"

@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Localization
@using RemoteMaster.Server.Abstractions
@using RemoteMaster.Server.Aggregates.OrganizationAggregate
@using RemoteMaster.Server.Aggregates.OrganizationalUnitAggregate
@using RemoteMaster.Server.Data
@using RemoteMaster.Shared.Abstractions
@using System.Security.Claims
@using RemoteMaster.Server.Aggregates.ApplicationUserAggregate

@inject IBrandingService BrandingService
@inject IDialogService DialogService
@inject ICrlService CrlService
@inject ISnackbar Snackbar
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider AccessTokenProvider
@inject UserManager<ApplicationUser> UserManager
@inject IStringLocalizer<Home> Localizer
@inject INotificationService NotificationService
@inject IOrganizationRepository OrganizationRepository
@inject IOrganizationalUnitRepository OrganizationalUnitRepository

<PageTitle>@Localizer["PageTitle"]</PageTitle>

<MudLayout>
    <MudAppBar Elevation="0" Color="Color.Primary">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudSpacer />
        <MudMenu Icon="@Icons.Material.Outlined.Notifications" Color="Color.Inherit" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter" PopoverClass="docs-layout-menu-shadow" ListClass="pa-2 docs-menu-list" LockScroll="true">
            <div class="d-flex justify-space-between align-center px-2">
                <MudText Typo="Typo.subtitle2">Notifications</MudText>
                <MudButton StartIcon="@Icons.Material.Filled.DoneAll" Variant="Variant.Text" Color="Color.Primary" Class="mr-n2 ml-16">Mark as read</MudButton>
            </div>
            @if (_messages != null)
            {
                @foreach (var (message, isRead) in _messages.Take(5))
                {
                    <MudMenuItem Class="rounded px-2 py-0">
                        <MudText Typo="Typo.subtitle2">@message.Title</MudText>
                        <MudText Typo="Typo.body2">@message.Text</MudText>
                        <MudText Typo="Typo.body2">@($"{message.Author} • {message.PublishDate:MM/dd/yyyy}")</MudText>
                    </MudMenuItem>
                    <MudDivider Class="my-2" />
                }
            }
            else
            {
                <div class="d-flex align-center relative justify-center px-2 py-8">
                    <MudText Class="mud-text-secondary my-12">Nothing new :(</MudText>
                </div>
            }
        </MudMenu>
        <AuthorizeView>
            <Authorized>
                <MudText>@context.User.Identity.Name (@context.User.FindFirst(ClaimTypes.Role)?.Value)</MudText>
            </Authorized>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer @bind-Open="@DrawerOpen" Variant="@DrawerVariant.Responsive" Elevation="0">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">
                <img src="@BrandingService.ApplicationLogo" width="@BrandingService.ApplicationLogoWidth" height="@BrandingService.ApplicationLogoHeight" alt="@BrandingService.ApplicationName" />
            </MudText>
        </MudDrawerHeader>

        <MudNavMenu>
            <AuthorizeView>
                <Authorized>
                    @if (context.User.IsInRole("Administrator"))
                    {
                        <MudNavLink Match="NavLinkMatch.All" OnClick="OpenHostConfig">@Localizer["MenuHostConfig"]</MudNavLink>
                        <MudNavLink Match="NavLinkMatch.All" OnClick="PublishCrl">@Localizer["MenuPublishCrl"]</MudNavLink>
                    }
                    <MudNavLink Match="NavLinkMatch.All" OnClick="ManageProfile">@Localizer["MenuProfile"]</MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" OnClick="Logout">@Localizer["MenuLogout"]</MudNavLink>
                </Authorized>
            </AuthorizeView>
        </MudNavMenu>
    </MudDrawer>

    <MudMainContent>
        <div class="flex h-full">
            <div class="w-1/5">
                <MudTreeView Items="@_treeItems" T="object" SelectedValueChanged="OnNodeSelected" Hover="true" Class="pa-6">
                    <ItemTemplate>
                        <MudTreeViewItem Text="@context.Text" Value="@context.Value" Icon="@context.Icon">
                            <ChildContent>
                                @if (context.Children is { Count: > 0 })
                                {
                                    @foreach (var child in context.Children)
                                    {
                                        <MudTreeViewItem Text="@child.Text" Value="@child.Value" Icon="@child.Icon" />
                                    }
                                }
                            </ChildContent>
                        </MudTreeViewItem>
                    </ItemTemplate>
                </MudTreeView>
            </div>

            <div class="flex flex-grow flex-col gap-4 p-4">
                <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6 tabs flex">
                    <MudTabPanel Text="@Localizer["MainTab"]" Icon="@Icons.Material.Filled.Api">
                        <AuthorizeView>
                            <Authorized>
                                @if (context.User.HasClaim("Power", "RebootComputer") || context.User.HasClaim("Power", "ShutdownComputer"))
                                {
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Power" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">@Localizer["Power"]</MudButton>
                                }             

                                @if (context.User.HasClaim("Power", "WakeUpComputer"))
                                {
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="WakeUp" Disabled="@(_selectedComputers.Count == 0)" Class="mr-2">@Localizer["WakeUp"]</MudButton>
                                }
                                
                                @if (context.User.HasClaim("Connect", "View") || context.User.HasClaim("Connect", "Control"))
                                {
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Connect" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">@Localizer["Connect"]</MudButton>
                                }      

                                @if (context.User.HasClaim("Security", "LockWorkStation"))
                                {
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Lock" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">Lock</MudButton>
                                }

                                @if (context.User.HasClaim("Execution", "OpenShell"))
                                {
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="OpenShell" Disabled="@(_selectedComputers.Count == 0)" Class="mr-2">@Localizer["OpenShell"]</MudButton>
                                }

                                @if (context.User.HasClaim("Execution", "Scripts"))
                                {
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="ExecuteScript" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">@Localizer["ExecuteScript"]</MudButton>
                                }

                                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="LogonComputers" Disabled="@(_selectedComputers.Count == 0 || _selectedComputers.Any(c => _availableComputers.ContainsKey(c.IpAddress) || _unavailableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">@Localizer["Logon"]</MudButton>
                                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="LogoffComputers" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.Any(c => _availableComputers.ContainsKey(c.IpAddress) || _unavailableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">@Localizer["Logoff"]</MudButton>
                                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Refresh" Class="ml-auto">Refresh</MudButton>
                            </Authorized>
                        </AuthorizeView>
                    </MudTabPanel>

                    <AuthorizeView>
                        <Authorized>
                            <MudTabPanel Text="@Localizer["ServiceTab"]" Icon="@Icons.Material.Filled.Key">
                                @if (context.User.HasClaim("Hardware", "SetMonitorState"))
                                {
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SetMonitorState" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">@Localizer["SetMonitorState"]</MudButton>
                                }
                                
                                @if (context.User.HasClaim("Execution", "ManagePsExecRules"))
                                {
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="ManagePsExecRules" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">@Localizer["PSExecRules"]</MudButton>
                                }
                                
                                @if (context.User.HasClaim("Screen", "Recording"))
                                {
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="ScreenRecorder" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">@Localizer["ScreenRecorder"]</MudButton>

                                }
                                
                                @if (context.User.HasClaim("Domain", "Membership"))
                                {
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="DomainMembership" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">@Localizer["DomainMembership"]</MudButton>
                                }
                                
                                @if (context.User.HasClaim("HostManagement", "Update"))
                                {
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Update" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">@Localizer["Update"]</MudButton>
                                }
                            </MudTabPanel>

                            <MudTabPanel Text="@Localizer["ToolsTab"]" Icon="@Icons.Material.Filled.MiscellaneousServices">
                                @if (context.User.HasClaim("Tasks", "Manager"))
                                {
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="OpenTaskManager" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">@Localizer["TaskManager"]</MudButton>
                                }
                                
                                @if (context.User.HasClaim("Files", "Manager"))
                                {
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="OpenFileManager" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">@Localizer["FileManager"]</MudButton>
                                }
                                
                                @if (context.User.HasClaim("Files", "Upload"))
                                {
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="FileUpload" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">@Localizer["UploadFile"]</MudButton>
                                }

                                @if (context.User.HasClaim("Communication", "MessageBox"))
                                {
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="MessageBox" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">@Localizer["MessageBox"]</MudButton>
                                }
                                
                                @if (context.User.HasClaim("Logs", "Manager"))
                                {
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="OpenLogsManager" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">Logs Viewer</MudButton>
                                }
                            </MudTabPanel>

                            <MudTabPanel Text="@Localizer["ManagementTab"]" Icon="@Icons.Material.Filled.Settings">
                                @if (context.User.HasClaim("HostInformation", "View"))
                                {
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="OpenHostInfo" Disabled="@(_selectedComputers.Count != 1)" Class="mr-2">@Localizer["HostInfo"]</MudButton>
                                }

                                @if (context.User.HasClaim("HostManagement", "Move"))
                                {
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="OpenMoveDialog" Disabled="@(_selectedComputers.Count == 0)" Class="mr-2">@Localizer["MoveHost"]</MudButton>
                                }
                                
                                @if (context.User.HasClaim("HostManagement", "Remove"))
                                {
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="RemoveComputers" Disabled="@(_selectedComputers.Count == 0)" Class="mr-2">@Localizer["Remove"]</MudButton>
                                }

                                @if (context.User.HasClaim("HostManagement", "RenewCertificate"))
                                {
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="RenewCertificate" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">@Localizer["RenewCertificate"]</MudButton>
                                }
                            </MudTabPanel>

                            @*<MudTabPanel Text="@Localizer["ExtraTab"]" Icon="@Icons.Material.Filled.Settings">
                                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="RemoteExecutor" Class="mr-2">@Localizer["RemoteExecutor"]</MudButton>
                            </MudTabPanel>*@
                        </Authorized>
                    </AuthorizeView>
                </MudTabs>

                <div class="flex flex-col gap-4">
                    <MudExpansionPanels MultiExpansion="true">
                        <MudExpansionPanel Text="@(Localizer["AvailableComputers"] + " (" + _availableComputers.Count + ")")" Expanded="true">
                            <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="SelectAllAvailableComputers" Disabled="@(!CanSelectAll(_availableComputers))">@Localizer["SelectAll"]</MudButton>
                            <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="DeselectAllAvailableComputers" Disabled="@(!CanDeselectAll(_availableComputers))">@Localizer["DeselectAll"]</MudButton>
                            <div class="mt-4 flex flex-wrap gap-4">
                                @if (_availableComputers.Any())
                                {
                                    @foreach (var computer in GetSortedComputers(_availableComputers))
                                    {
                                        <div class="w-1/6">
                                            <ComputerCard @key="computer" Computer="computer" IsSelectedChanged="@(isSelected => SelectComputer(computer, isSelected))" IsSelected="_selectedComputers.Contains(computer)" />
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="w-full p-4 text-center">
                                        <MudText Typo="Typo.body1">@Localizer["NoAvailableComputers"]</MudText>
                                    </div>
                                }
                            </div>
                        </MudExpansionPanel>
                        <MudExpansionPanel Text="@(Localizer["UnavailableComputers"] + " (" + _unavailableComputers.Count + ")")" Expanded="true">
                            <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="SelectAllUnavailableComputers" Disabled="@(!CanSelectAll(_unavailableComputers))">@Localizer["SelectAll"]</MudButton>
                            <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="DeselectAllUnavailableComputers" Disabled="@(!CanDeselectAll(_unavailableComputers))">@Localizer["DeselectAll"]</MudButton>
                            <div class="mt-4 flex flex-wrap gap-4">
                                @if (_unavailableComputers.Any())
                                {
                                    @foreach (var computer in GetSortedComputers(_unavailableComputers))
                                    {
                                        <div class="w-1/6">
                                            <ComputerCard @key="computer" Computer="computer" IsSelectedChanged="@(isSelected => SelectComputer(computer, isSelected))" IsSelected="_selectedComputers.Contains(computer)" />
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="w-full p-4 text-center">
                                        <MudText Typo="Typo.body1">@Localizer["NoUnavailableComputers"]</MudText>
                                    </div>
                                }
                            </div>
                        </MudExpansionPanel>
                        <MudExpansionPanel Text="@(Localizer["PendingComputers"] + " (" + _pendingComputers.Count + ")")" Expanded="true">
                            <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="SelectAllPendingComputers" Disabled="@(!CanSelectAll(_pendingComputers))">@Localizer["SelectAll"]</MudButton>
                            <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="DeselectAllPendingComputers" Disabled="@(!CanDeselectAll(_pendingComputers))">@Localizer["DeselectAll"]</MudButton>
                            <div class="mt-4 flex flex-wrap gap-4">
                                @if (_pendingComputers.Any())
                                {
                                    @foreach (var computer in GetSortedComputers(_pendingComputers))
                                    {
                                        <div class="w-1/6">
                                            <ComputerCard @key="computer" Computer="computer" IsSelectedChanged="@(isSelected => SelectComputer(computer, isSelected))" IsSelected="_selectedComputers.Contains(computer)" />
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="w-full p-4 text-center">
                                        <MudText Typo="Typo.body1">@Localizer["NoPendingComputers"]</MudText>
                                    </div>
                                }
                            </div>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                </div>
            </div>
        </div>
    </MudMainContent>
</MudLayout>

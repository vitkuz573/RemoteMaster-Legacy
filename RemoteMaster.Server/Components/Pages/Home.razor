@page "/"

@rendermode InteractiveServer

@using Microsoft.AspNetCore.Identity
@using RemoteMaster.Server.Abstractions
@using System.Security.Claims
@using RemoteMaster.Server.Aggregates.ApplicationUserAggregate

@inject IBrandingService BrandingService
@inject IDialogService DialogService
@inject ICrlService CrlService
@inject ISnackbar SnackBar
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider AccessTokenProvider
@inject UserManager<ApplicationUser> UserManager
@inject INotificationService NotificationService
@inject IOrganizationService OrganizationService
@inject ISslWarningService SslWarningService
@inject ILogger<Home> Logger

<PageTitle>RemoteMaster - Home</PageTitle>

<MudLayout>
    <MudAppBar Elevation="0" Color="Color.Primary">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudSpacer />
        <MudMenu Icon="@Icons.Material.Outlined.Notifications" Color="Color.Inherit" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter" PopoverClass="docs-layout-menu-shadow" ListClass="pa-2 docs-menu-list" LockScroll="true">
            <div class="d-flex justify-space-between align-center px-2">
                <MudText Typo="Typo.subtitle2">Notifications</MudText>
                <MudButton StartIcon="@Icons.Material.Filled.DoneAll" Variant="Variant.Text" Color="Color.Primary" Class="mr-n2 ml-16">Mark as read</MudButton>
            </div>
            @if (_messages != null)
            {
                @foreach (var (message, _) in _messages.Take(5))
                {
                    <MudMenuItem Class="rounded px-2 py-0">
                        <MudText Typo="Typo.subtitle2">@message.Title</MudText>
                        <MudText Typo="Typo.body2">@message.Text</MudText>
                        <MudText Typo="Typo.body2">@($"{message.Author} • {message.PublishDate:MM/dd/yyyy}")</MudText>
                    </MudMenuItem>
                    <MudDivider Class="my-2" />
                }
            }
            else
            {
                <div class="d-flex align-center relative justify-center px-2 py-8">
                    <MudText Class="mud-text-secondary my-12">Nothing new :(</MudText>
                </div>
            }
        </MudMenu>
        <AuthorizeView>
            <Authorized>
                <MudText>@context.User.Identity!.Name (@context.User.FindFirstValue(ClaimTypes.Role))</MudText>
            </Authorized>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer @bind-Open="@DrawerOpen" Variant="@DrawerVariant.Responsive" Elevation="0">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">
                <img src="@BrandingService.ApplicationLogo" width="@BrandingService.ApplicationLogoWidth" height="@BrandingService.ApplicationLogoHeight" draggable="false" alt="@BrandingService.ApplicationName" />
            </MudText>
        </MudDrawerHeader>

        <MudNavMenu>
            <AuthorizeView>
                <Authorized>
                    @if (context.User.HasClaim("CertificateManagement", "ViewTasks"))
                    {
                        <MudNavLink Match="NavLinkMatch.All" OnClick="OpenCertificateRenewTasks">Certificate tasks</MudNavLink>
                    }

                    @if (context.User.HasClaim("CertificateManagement", "PublishCRL"))
                    {
                        <MudNavLink Match="NavLinkMatch.All" OnClick="PublishCrl">Publish CRL</MudNavLink>
                    }

                    <MudNavLink Match="NavLinkMatch.All" OnClick="ManageProfile">Profile</MudNavLink>
                    <MudNavLink Match="NavLinkMatch.All" OnClick="Logout">Logout</MudNavLink>
                </Authorized>
            </AuthorizeView>
        </MudNavMenu>
    </MudDrawer>

    <MudMainContent>
        <div class="flex h-full">
            <div class="flex-shrink-0 w-96">
                <MudTreeView Items="@_treeItems" T="object" SelectedValueChanged="OnNodeSelected" Hover="true" Class="pa-6">
                    <ItemTemplate>
                        <MudTreeViewItem Text="@context.Text" Value="@context.Value" Icon="@context.Icon">
                            <ChildContent>
                                @if (context.Children is { Count: > 0 })
                                {
                                    @foreach (var child in context.Children)
                                    {
                                        <MudTreeViewItem Text="@child.Text" Value="@child.Value" Icon="@child.Icon" />
                                    }
                                }
                            </ChildContent>
                        </MudTreeViewItem>
                    </ItemTemplate>
                </MudTreeView>
            </div>

            <div class="flex flex-grow flex-col gap-4 overflow-auto p-4">
                <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6 tabs flex">
                    @RenderTabs()
                </MudTabs>

                <div class="flex flex-col gap-4">
                    <MudExpansionPanels MultiExpansion="true">
                        @foreach (var category in GetHostCategories())
                        {
                            <MudExpansionPanel @key="category.Title" Text="@($"{category.Title} ({category.Count})")" Expanded="true">
                                <div class="mb-4 flex gap-2">
                                    <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="category.SelectAllAction" Disabled="@(!category.CanSelectAll())" >
                                        Select All
                                    </MudButton>

                                    <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="category.DeselectAllAction" Disabled="@(!category.CanDeselectAll())">
                                        Deselect All
                                    </MudButton>
                                </div>

                                <div class="mt-4 flex flex-wrap gap-4">
                                    @if (category.Hosts.Any())
                                    {
                                        @foreach (var host in GetSortedHosts(category.Hosts))
                                        {
                                            <div class="w-1/6">
                                                <HostCard @key="host.IpAddress" Host="host" IsSelectedChanged="@(isSelected => SelectHost(host, isSelected))" IsSelected="_selectedHosts.Contains(host)" />
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="w-full p-4 text-center">
                                            <MudText Typo="Typo.body1">No @category.Title.ToLower()</MudText>
                                        </div>
                                    }
                                </div>
                            </MudExpansionPanel>
                        }
                    </MudExpansionPanels>
                </div>
            </div>
        </div>
    </MudMainContent>
</MudLayout>

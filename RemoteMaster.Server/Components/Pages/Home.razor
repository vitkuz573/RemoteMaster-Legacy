@page "/"

@rendermode InteractiveServer

@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using RemoteMaster.Server.Abstractions
@using RemoteMaster.Server.Data
@using RemoteMaster.Server.Models
@using RemoteMaster.Shared.Abstractions
@using RemoteMaster.Shared.Models

@inject IBrandingService BrandingService
@inject IDialogService DialogService
@inject IDatabaseService DatabaseService
@inject IHttpContextAccessor HttpContextAccessor
@inject ICrlService CrlService
@inject ISnackbar Snackbar
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider AccessTokenProvider
@inject IHttpContextAccessor HttpContextAccessor
@inject UserManager<ApplicationUser> UserManager

<PageTitle>@BrandingService.ApplicationName - Home</PageTitle>

<MudLayout>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudSpacer />
        @_userInfo.UserName (@_userInfo.Roles.FirstOrDefault())
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen" Variant="@DrawerVariant.Responsive">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">
                <img src="@BrandingService.ApplicationLogo" width="@BrandingService.ApplicationLogoWidth" height="@BrandingService.ApplicationLogoHeight" alt="@BrandingService.ApplicationName" />
            </MudText>
        </MudDrawerHeader>
        <MudNavMenu>
            @if (_userInfo.Roles.Contains("Administrator"))
            {
                <MudNavLink Match="NavLinkMatch.All" OnClick="OpenHostConfig">Host Configuration Generator</MudNavLink>
                <MudNavLink Match="NavLinkMatch.All" OnClick="PublishCrl">Publish CRL</MudNavLink>   
            }
            <MudNavLink Match="NavLinkMatch.All" OnClick="ManageProfile">Profile</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" OnClick="Logout">Logout</MudNavLink>
        </MudNavMenu>
    </MudDrawer>

    <MudMainContent>
        <div class="flex">
            <div>
                <MudTreeView Items="@_treeItems" T="INode" SelectedValueChanged="OnNodeSelected" Hover="true" Class="pa-6">
                    <ItemTemplate>
                        <MudTreeViewItem Text="@context.Text" Value="@context.Value" Icon="@context.Icon">
                            <ChildContent>
                                @if (context.Children != null && context.Children.Count > 0)
                                {
                                    @foreach (var child in context.Children)
                                    {
                                        <MudTreeViewItem Text="@child.Text" Value="@child.Value" Icon="@child.Icon" />
                                    }
                                }
                            </ChildContent>
                        </MudTreeViewItem>
                    </ItemTemplate>
                </MudTreeView>
            </div>

            <div class="flex flex-grow flex-col gap-4 p-4">
                <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6 tabs flex">
                    <MudTabPanel Text="Main" Icon="@Icons.Material.Filled.Api">
                        @if (_userInfo.Roles.Contains("Administrator"))
                        {
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Power" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">Power</MudButton>
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="WakeUp" Disabled="@(_selectedComputers.Count == 0)" Class="mr-2">Wake Up</MudButton>                            
                        }
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Connect" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">Connect</MudButton>
                        @if (_userInfo.Roles.Contains("Administrator"))
                        {
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="OpenShell" Disabled="@(_selectedComputers.Count == 0)" Class="mr-2">Open Shell</MudButton>
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="ExecuteScript" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">Execute Script</MudButton>                            
                        }
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(async () => await LogonComputers())" Disabled="@(_selectedComputers.Count == 0 || _selectedComputers.Any(c => _availableComputers.ContainsKey(c.IpAddress) || _unavailableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">Logon</MudButton>
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(async () => await LogoffComputers())" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.Any(c => _availableComputers.ContainsKey(c.IpAddress) || _unavailableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">Logoff</MudButton>
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Refresh" Class="ml-auto">Refresh</MudButton>
                    </MudTabPanel>

                    @if (_userInfo.Roles.Contains("Administrator"))
                    {
                        <MudTabPanel Text="Service" Icon="@Icons.Material.Filled.Key">
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SetMonitorState" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">Set Monitor State</MudButton>
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="ManagePsExecRules" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">PSExec Rules</MudButton>
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="ScreenRecorder" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">Screen Recorder</MudButton>
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="DomainMembership" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">Domain Membership</MudButton>
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Update" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">Update</MudButton>
                        </MudTabPanel>

                        <MudTabPanel Text="Tools" Icon="@Icons.Material.Filled.MiscellaneousServices">
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="OpenTaskManager" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">Task Manager</MudButton>
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="OpenFileManager" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">File Manager</MudButton>
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="FileUpload" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">Upload File</MudButton>
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="MessageBox" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">MessageBox</MudButton>
                        </MudTabPanel>

                        <MudTabPanel Text="Management" Icon="@Icons.Material.Filled.Settings">
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="OpenHostInfo" Disabled="@(_selectedComputers.Count != 1)" Class="mr-2">Host Info</MudButton>
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="OpenMoveDialog" Disabled="@(_selectedComputers.Count == 0)" Class="mr-2">Move</MudButton>
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="RemoveComputers" Disabled="@(_selectedComputers.Count == 0)" Class="mr-2">Remove</MudButton>
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="RenewCertificate" Disabled="@(_selectedComputers.Count == 0 || !_selectedComputers.All(c => _availableComputers.ContainsKey(c.IpAddress)))" Class="mr-2">Renew Certificate</MudButton>
                        </MudTabPanel>
                    
                        <MudTabPanel Text="Extra" Icon="@Icons.Material.Filled.Settings">
                            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="RemoteExecutor" Class="mr-2">Remote Executor</MudButton>
                        </MudTabPanel>                        
                    }
                </MudTabs>

                <div class="flex flex-col gap-4">
                    <MudExpansionPanels MultiExpansion="true">
                        <MudExpansionPanel Text="@($"Available computers ({_availableComputers.Count})")" Expanded="true">
                            <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="SelectAllAvailableComputers" Disabled="@(!CanSelectAll(_availableComputers))">Select All</MudButton>
                            <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="DeselectAllAvailableComputers" Disabled="@(!CanDeselectAll(_availableComputers))">Deselect All</MudButton>
                            <div class="mt-4 flex flex-wrap gap-4">
                                @if (_availableComputers.Any())
                                {
                                    @foreach (var computer in GetSortedComputers(_availableComputers))
                                    {
                                        <div class="w-1/6">
                                            <ComputerCard @key="computer" Computer="computer" IsSelectedChanged="@(isSelected => SelectComputer(computer, isSelected))" IsSelected="_selectedComputers.Contains(computer)" />
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="w-full p-4 text-center">
                                        <MudText Typo="Typo.body1">No available computers to display.</MudText>
                                    </div>
                                }
                            </div>
                        </MudExpansionPanel>
                        <MudExpansionPanel Text="@($"Unavailable computers ({_unavailableComputers.Count})")" Expanded="true">
                            <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="SelectAllUnavailableComputers" Disabled="@(!CanSelectAll(_unavailableComputers))">Select All</MudButton>
                            <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="DeselectAllUnavailableComputers" Disabled="@(!CanDeselectAll(_unavailableComputers))">Deselect All</MudButton>
                            <div class="mt-4 flex flex-wrap gap-4">
                                @if (_unavailableComputers.Any())
                                {
                                    @foreach (var computer in GetSortedComputers(_unavailableComputers))
                                    {
                                        <div class="w-1/6">
                                            <ComputerCard @key="computer" Computer="computer" IsSelectedChanged="@(isSelected => SelectComputer(computer, isSelected))" IsSelected="_selectedComputers.Contains(computer)" />
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="w-full p-4 text-center">
                                        <MudText Typo="Typo.body1">No unavailable computers to display.</MudText>
                                    </div>
                                }
                            </div>
                        </MudExpansionPanel>
                        <MudExpansionPanel Text="@($"Pending computers ({_pendingComputers.Count})")" Expanded="true">
                            <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="SelectAllPendingComputers" Disabled="@(!CanSelectAll(_pendingComputers))">Select All</MudButton>
                            <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="DeselectAllPendingComputers" Disabled="@(!CanDeselectAll(_pendingComputers))">Deselect All</MudButton>
                            <div class="mt-4 flex flex-wrap gap-4">
                                @if (_pendingComputers.Any())
                                {
                                    @foreach (var computer in GetSortedComputers(_pendingComputers))
                                    {
                                        <div class="w-1/6">
                                            <ComputerCard @key="computer" Computer="computer" IsSelectedChanged="@(isSelected => SelectComputer(computer, isSelected))" IsSelected="_selectedComputers.Contains(computer)" />
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="w-full p-4 text-center">
                                        <MudText Typo="Typo.body1">No pending computers to display.</MudText>
                                    </div>
                                }
                            </div>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                </div>
            </div>
        </div>
    </MudMainContent>
</MudLayout>

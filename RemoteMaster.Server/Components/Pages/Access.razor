@page "/{Host}/access"

@rendermode InteractiveServer

@using RemoteMaster.Server.Abstractions

@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IAccessTokenProvider AccessTokenProvider
@inject ISnackbar SnackBar
@inject IDialogService DialogService
@inject ISslWarningService SslWarningService
@inject IHostAccessService HostAccessService
@inject ILogger<Access> Logger

<PageTitle>@_title</PageTitle>

<MudLayout>
    <MudAppBar Dense="true">
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.End" OnClick="@DrawerToggle" id="drawerToggleButton" />
    </MudAppBar>

    <MudDrawer @bind-Open="@_drawerOpen" Anchor="Anchor.End" Variant="@DrawerVariant.Responsive">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">
                Settings
            </MudText>
        </MudDrawerHeader>
        <MudNavMenu Color="Color.Info">
            <AuthorizeView>
                <Authorized>
                    @if (context.User.HasClaim("Screen", "Change"))
                    {
                        <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.DisplaySettings">
                            <MudSelect Value="@_selectedDisplay" ValueChanged="OnChangeScreen" Label="Display" T="string" Dense="true">
                                @foreach (var displayItem in GetDisplayItems())
                                {
                                    <MudSelectItem Value="@displayItem.Name">@displayItem.DisplayName</MudSelectItem>
                                }
                            </MudSelect>
                        </MudNavLink>
                    }

                    @if (context.User.HasClaim("Screen", "SetCodec"))
                    {
                        <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Hd">
                            <MudSelect Value="@_selectedCodec" ValueChanged="OnChangeCodec" Label="Codec" T="string?" Dense="true">
                                @foreach (var codecItem in _codecs)
                                {
                                    <MudSelectItem Value="@codecItem">@codecItem</MudSelectItem>
                                }
                            </MudSelect>
                        </MudNavLink>
                    }

                    @if (context.User.HasClaim("Screen", "SetFrameRate"))
                    {
                        <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Speed">
                            <MudText>Frame Rate</MudText>
                            <MudSlider T="int" Value="@_frameRate" Min="10" Max="100" ValueChanged="SetFrameRate"/>
                        </MudNavLink>
                    }

                    @if (context.User.HasClaim("Screen", "SetQuality"))
                    {
                        <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.HighQuality">
                            <MudText>Image Quality</MudText>
                            <MudSlider T="int" Value="@_imageQuality" Min="0" Max="100" ValueChanged="SetImageQuality"/>
                        </MudNavLink>
                    }

                    @if (context.User.HasClaim("Screen", "ToggleCursor"))
                    {
                        <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ControlPoint">
                            <MudText>Draw Cursor</MudText>
                            <MudSwitch T="bool" Value="@_drawCursor" ValueChanged="ToggleDrawCursor"/>
                        </MudNavLink>
                    }

                    @if (context.User.HasClaim("Input", "Toggle"))
                    {
                        <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Keyboard">
                            <MudText>Input</MudText>
                            <MudSwitch T="bool" Value="@_isInputEnabled" ValueChanged="ToggleInput"/>
                        </MudNavLink>
                    }

                    @if (context.User.HasClaim("Input", "Block"))
                    {
                        <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.KeyboardHide">
                            <MudText>User Input</MudText>
                            <MudSwitch T="bool" Value="@_isUserInputEnabled" ValueChanged="ToggleUserInput"/>
                        </MudNavLink>
                    }

                    @if (context.User.HasClaim("HostManagement", "Terminate"))
                    {
                        <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.DeleteSweep" OnClick="TerminateHost">Terminate Host</MudNavLink>
                    }

                    @if (context.User.HasClaim("Security", "LockWorkStation"))
                    {
                        <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Lock" OnClick="LockWorkStation">Lock Workstation</MudNavLink>
                    }

                    @if (context.User.HasClaim("Security", "LogOffUser"))
                    {
                        <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Logout" OnClick="LogOffUser">Logoff User</MudNavLink>
                    }

                    @if (context.User.HasClaim("Security", "SendCtrlAltDel"))
                    {
                        <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ControlPoint" OnClick="SendCtrlAltDel">Send Ctrl+Alt+Del</MudNavLink>
                    }

                    @if (context.User.HasClaim("Power", "Reboot") || context.User.HasClaim("Power", "Shutdown"))
                    {
                        <MudNavGroup Title="Power" Icon="@Icons.Material.Filled.Power">
                            @if (context.User.HasClaim("Power", "Reboot"))
                            {
                                <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.History" OnClick="RebootHost">Reboot Host</MudNavLink>
                            }

                            @if (context.User.HasClaim("Power", "Shutdown"))
                            {
                                <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.PowerOff" OnClick="ShutdownHost">Shutdown Host</MudNavLink>
                            }
                        </MudNavGroup>
                    }
                </Authorized>
            </AuthorizeView>
            
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Headset" OnClick="ResumeAudioContext">
                Resume Audio
            </MudNavLink>
            
            <MudNavGroup Title="System Information" Icon="@Icons.Material.Filled.Info">
                <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Https">
                    Transport Type: @_transportType
                </MudNavLink>

                <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Tab">OS: @_operatingSystem</MudNavLink>
                <MudNavLink Icon="@Icons.Material.Filled.Computer">Host Version: @_hostVersion (.NET @_dotNetVersion) </MudNavLink>
            </MudNavGroup>

            <MudNavGroup Title="@($"Viewers ({_viewers.Count})")" Icon="@Icons.Material.Filled.People">
                @if (_viewers.Any())
                {
                    <MudList T="string">
                        @foreach (var viewer in _viewers)
                        {
                            <MudListItem OnClick="() => DisconnectViewer(viewer.ConnectionId)">
                                <MudText>
                                    <b>ID:</b> @viewer.ConnectionId<br />
                                    <b>Group:</b> @viewer.Group<br />
                                    <b>Username:</b> @viewer.UserName<br />
                                    <b>Role:</b> @viewer.Role<br />
                                    <b>Connected:</b> @viewer.ConnectedTime.ToLocalTime()<br />
                                    <b>IP Address:</b> @viewer.IpAddress<br />
                                    <b>Authentication Type:</b> @viewer.AuthenticationType
                                </MudText>
                            </MudListItem>
                        }
                    </MudList>
                }
                else
                {
                    <MudText>No viewers connected</MudText>
                }
            </MudNavGroup>
        </MudNavMenu>
    </MudDrawer>

    <MudMainContent>
        <div class="flex h-screen items-center justify-center bg-gray-800 pb-14 text-white">
            @RenderScreenImage()
        </div>
    </MudMainContent>
</MudLayout>

<style>
    body {
        overflow: hidden;
    }
</style>

@page "/Account/LoginWith2fa"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using RemoteMaster.Server.Abstractions
@using RemoteMaster.Server.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ITokenService TokenService
@inject IHttpContextAccessor HttpContextAccessor
@inject ILogger<LoginWith2fa> Logger

<PageTitle>Two-factor authentication</PageTitle>

<div class="min-h-screen flex items-center justify-center bg-gray-900 px-4 sm:px-6 lg:px-8">
    <div class="w-full max-w-md space-y-8">
        <div class="bg-white rounded-lg shadow-xl">
            <div class="p-8">
                <h1 class="text-3xl font-bold text-center text-gray-800 mb-4">Two-factor authentication</h1>
                <hr class="mb-6 border-gray-300" />
                <StatusMessage Message="@message" />
                <p class="mb-4 text-gray-700">Your login is protected with an authenticator app. Enter your authenticator code below.</p>
                <EditForm Model="Input" FormName="login-with-2fa" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
                    <input type="hidden" name="RememberMe" value="@RememberMe" />
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-red-500" role="alert" />
                    <div class="mb-4">
                        <label for="two-factor-code" class="block text-sm font-medium text-gray-700">Authenticator code</label>
                        <InputText @bind-Value="Input.TwoFactorCode" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" autocomplete="off" />
                        <ValidationMessage For="() => Input.TwoFactorCode" class="text-red-500 mt-2" />
                    </div>
                    <div class="flex items-center mb-4">
                        <InputCheckbox @bind-Value="Input.RememberMachine" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded" />
                        <label for="remember-machine" class="ml-2 block text-sm text-gray-900"> Remember this machine </label>
                    </div>
                    <button type="submit" class="w-full px-4 py-2 text-lg rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50">Log in</button>
                </EditForm>
                <p class="mt-6 text-sm text-gray-600">
                    Don't have access to your authenticator device? You can
                    <a href="Account/LoginWithRecoveryCode?ReturnUrl=@ReturnUrl" class="text-indigo-600 hover:text-indigo-700 underline">log in with a recovery code</a>.
                </p>
            </div>
        </div>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private bool RememberMe { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Ensure the user has gone through the username & password screen first
        user = await SignInManager.GetTwoFactorAuthenticationUserAsync() ??
            throw new InvalidOperationException("Unable to load two-factor authentication user.");
    }

    private async Task OnValidSubmitAsync()
    {
        var authenticatorCode = Input.TwoFactorCode!.Replace(" ", string.Empty).Replace("-", string.Empty);
        var result = await SignInManager.TwoFactorAuthenticatorSignInAsync(authenticatorCode, RememberMe, Input.RememberMachine);
        var userId = await UserManager.GetUserIdAsync(user);

        if (result.Succeeded)
        {
            Logger.LogInformation("User with ID '{UserId}' logged in with 2fa.", userId);

            var accessTokenString = TokenService.GenerateAccessToken(user.Email);
            var cookieOptions = new CookieOptions
                {
                    HttpOnly = true,
                    Expires = DateTime.UtcNow.AddHours(2)
                };

            HttpContextAccessor.HttpContext.Response.Cookies.Append("accessToken", accessTokenString, cookieOptions);

            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User with ID '{UserId}' account locked out.", userId);
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            Logger.LogWarning("Invalid authenticator code entered for user with ID '{UserId}'.", userId);
            message = "Error: Invalid authenticator code.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Authenticator code")]
        public string? TwoFactorCode { get; set; }

        [Display(Name = "Remember this machine")]
        public bool RememberMachine { get; set; }
    }
}

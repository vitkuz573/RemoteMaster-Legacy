@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using RemoteMaster.Server.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager

@if (externalLogins.Length == 0)
{
    <div class="text-center py-4 text-sm text-gray-500">
        There are no external authentication services configured. See this <a href="https://go.microsoft.com/fwlink/?LinkID=532715" class="text-indigo-600 hover:text-indigo-500">
            article
            about setting up this ASP.NET application to support logging in via external services
        </a>.
    </div>
}
else
{
    <form class="space-y-4" action="Account/PerformExternalLogin" method="post">
        <div>
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
            <div class="flex flex-col items-center">
                @foreach (var provider in externalLogins)
                {
                    <button type="submit"
                            class="mt-2 w-full max-w-xs flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                            name="provider" value="@provider.Name"
                            title="Log in using your @provider.DisplayName account">
                        @provider.DisplayName
                    </button>
                }
            </div>
        </div>
    </form>
}

@code {
    private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }
}

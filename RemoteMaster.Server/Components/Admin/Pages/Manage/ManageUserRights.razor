@page "/Admin/UserRights"

@rendermode InteractiveServer

@using Microsoft.AspNetCore.Identity
@using RemoteMaster.Server.Aggregates.OrganizationAggregate
@using RemoteMaster.Server.Aggregates.OrganizationalUnitAggregate
@using RemoteMaster.Server.Components.Account.Shared
@using RemoteMaster.Server.Abstractions
@using RemoteMaster.Server.Aggregates.ApplicationUserAggregate

@inject NavigationManager NavigationManager
@inject ITokenService TokenService
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject IOrganizationService OrganizationService
@inject IOrganizationalUnitService OrganizationalUnitService

<PageTitle>Manage User Rights</PageTitle>

<StatusMessage UseHttpContext="false" Message="@_message" />

<div class="mb-4">
    <label for="selectedUser" class="block text-sm font-medium text-gray-700">Select User</label>
    <InputSelect id="selectedUser" Value="SelectedUserId" ValueChanged="EventCallback.Factory.Create<string?>(this, OnUserChanged)" ValueExpression="@(() => SelectedUserId)" class="mt-1 block w-full rounded-md border border-gray-300 bg-white px-3 py-2 shadow-sm">
        <option value="">Select a user</option>
        @foreach (var user in _users)
        {
            <option value="@user.Id">@user.UserName</option>
        }
    </InputSelect>
</div>

@if (!string.IsNullOrEmpty(SelectedUserId))
{
    <EditForm Model="SelectedUserModel" OnValidSubmit="OnValidSubmitAsync" class="space-y-6">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-red-500" role="alert" />

        <div>
            <label for="role" class="block text-sm font-medium text-gray-700">Role</label>
            <InputSelect @bind-Value="SelectedUserModel.Role" id="role" class="mt-1 block w-full rounded-md border border-gray-300 bg-white px-3 py-2 shadow-sm">
                <option value="">Select a role</option>
                @foreach (var role in _roles)
                {
                    <option value="@role.Name">@role.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="() => SelectedUserModel.Role" class="text-red-500 mt-1" />
        </div>

        <div class="mt-4">
            <InputCheckbox @bind-Value="SelectedUserModel.IsLockedOut" class="form-checkbox h-4 w-4 text-indigo-600 transition duration-150 ease-in-out" @onchange="ToggleLockoutDateTimeInputs" />
            <label class="ml-2 text-sm font-medium text-gray-700">Lockout Account</label>
        </div>

        @if (SelectedUserModel.IsLockedOut)
        {
            <div class="mt-4">
                <InputCheckbox @bind-Value="SelectedUserModel.IsPermanentLockout" class="form-checkbox h-4 w-4 text-indigo-600 transition duration-150 ease-in-out" />
                <label class="ml-2 text-sm font-medium text-gray-700">Permanent Lockout</label>
            </div>

            @if (!SelectedUserModel.IsPermanentLockout)
            {
                <div class="mt-4">
                    <label for="lockoutEndDateTime" class="block text-sm font-medium text-gray-700">Lockout End Date and Time</label>
                    <InputDate id="lockoutEndDateTime" @bind-Value="SelectedUserModel.LockoutEndDateTime" Type="InputDateType.DateTimeLocal" class="mt-1 block w-full rounded-md border border-gray-300 bg-white px-3 py-2 shadow-sm" />
                </div>
            }
        }
        
        <div class="mt-4">
            <InputCheckbox @bind-Value="SelectedUserModel.CanAccessUnregisteredHosts" class="form-checkbox h-4 w-4 text-indigo-600 transition duration-150 ease-in-out" @onchange="StateHasChanged" />
            <label class="ml-2 text-sm font-medium text-gray-700">Allow access to unregistered hosts</label>
        </div>

        <div>
            @foreach (var organization in _organizations)
            {
                <div class="mt-4">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <InputCheckbox @bind-Value="organization.IsSelected" @onchange="() => OnOrganizationChanged(organization)" class="form-checkbox h-4 w-4 text-indigo-600 transition duration-150 ease-in-out" disabled="@string.IsNullOrEmpty(SelectedUserModel.Role)" />
                            <label class="ml-2 text-sm font-medium text-gray-700">@organization.Name</label>
                        </div>
                        <button type="button" @onclick="() => ToggleOrganizationExpansion(organization)" class="text-sm text-blue-500 hover:underline">
                            @(organization.IsExpanded ? "Collapse" : "Expand")
                        </button>
                    </div>
                    @if (organization.IsExpanded)
                    {
                        <div class="ml-6 mt-2 space-y-2">
                            <div class="mb-2 flex items-center">
                                <button type="button" @onclick="() => SelectAllOrganizationalUnits(organization)" class="text-sm text-white bg-blue-500 hover:bg-blue-700 px-2 py-1 rounded disabled:opacity-50 disabled:cursor-not-allowed"
                                        disabled="@(organization.OrganizationalUnits.All(ou => ou.IsSelected) || !organization.IsSelected || string.IsNullOrEmpty(SelectedUserModel.Role))">
                                    Select All
                                </button>
                                <button type="button" @onclick="() => DeselectAllOrganizationalUnits(organization)" class="ml-2 text-sm text-white bg-red-500 hover:bg-red-700 px-2 py-1 rounded disabled:opacity-50 disabled:cursor-not-allowed"
                                        disabled="@(organization.OrganizationalUnits.All(ou => !ou.IsSelected) || !organization.IsSelected || string.IsNullOrEmpty(SelectedUserModel.Role))">
                                    Deselect All
                                </button>
                            </div>
                            @foreach (var unit in organization.OrganizationalUnits)
                            {
                                <div class="flex items-center">
                                    <InputCheckbox @bind-Value="unit.IsSelected" class="form-checkbox h-4 w-4 text-indigo-600 transition duration-150 ease-in-out" disabled="@(!organization.IsSelected || string.IsNullOrEmpty(SelectedUserModel.Role))" />
                                    <label class="ml-2 text-sm font-medium text-gray-700">@unit.Name</label>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        </div>

        <button type="submit" class="mt-4 flex w-full justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-lg font-medium text-white shadow-sm hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed"
                disabled="@(!HasChanges)">
            Save
        </button>
    </EditForm>
}
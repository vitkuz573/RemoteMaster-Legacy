@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace RemoteMaster.Server.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="google" content="notranslate">
    <base href="~/" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="RemoteMaster.Server.styles.css" rel="stylesheet" />

    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&amp;display=swap" rel="stylesheet">

    <link href="css/compiled.css" rel="stylesheet" />

    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />

    <link rel="icon" type="image/png" href="favicon.png"/>
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>

    <script src="_content/MudBlazor/MudBlazor.min.js"></script>

    <script>
        window.revokeUrl = URL.revokeObjectURL;

        window.createObjectBlobUrl = function (data, type) {
            return URL.createObjectURL(new Blob([data], { type: type }));
        }

        window.createImageBlobUrl = function (data) {
            return window.createObjectBlobUrl(data, 'image/jpeg');
        }

        window.addKeyDownEventListener = (dotnetHelper) => {
            window.onkeydown = (e) => {
                dotnetHelper.invokeMethodAsync('OnKeyDown', e.keyCode);
            };
        };

        window.addKeyUpEventListener = (dotnetHelper) => {
            window.onkeyup = (e) => {
                dotnetHelper.invokeMethodAsync('OnKeyUp', e.keyCode);
            };
        };

        window.setTitle = (title) => document.title = title;

        window.openNewWindow = function (url) {
            return window.open(url, '_blank', 'toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes');
        };

        window.addEventListener("keydown", function (e) {
            if (e.ctrlKey && e.which == 83) {
                e.preventDefault();
            }
        });

        window.selectFile = function () {
            return new Promise((resolve, reject) => {
                var input = document.createElement('input');
                input.type = 'file';
                input.accept = '.ps1, application/x-powershell, .bat, .cmd, application/x-bat, application/x-cmd';
                input.onchange = function (e) {
                    var file = e.target.files[0];
                    var reader = new FileReader();
                    reader.onload = function (event) {
                        resolve({ content: event.target.result, name: file.name });
                    };
                    reader.onerror = function (error) {
                        reject("Error reading file: " + error.toString());
                    };
                    reader.readAsText(file);
                };
                input.click();
            });
        };

        window.addBeforeUnloadListener = (instance) => {
            window.addEventListener("beforeunload", function (event) {
                instance.invokeMethodAsync("OnBeforeUnload");
            });
        };

        window.showAlert = function (message) {
            alert(message);
        };
    </script>
</body>
</html>

name: .NET Core CI with Coverage

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install npm packages
      working-directory: RemoteMaster.Server
      run: npm install

    - name: Restore dependencies
      run: dotnet restore

    - name: Create solution without Windows projects
      shell: pwsh
      run: |
        Copy-Item -Path RemoteMaster.sln -Destination RemoteMaster.NoWindows.sln
        dotnet sln RemoteMaster.NoWindows.sln remove RemoteMaster.Host.Windows/RemoteMaster.Host.Windows.csproj

    - name: Clean directories
      run: |
        if (Test-Path -Path "./TestResults") { Remove-Item -Recurse -Force -Path "./TestResults" }
        mkdir TestResults

    - name: Build non-Windows solution
      run: dotnet build RemoteMaster.NoWindows.sln --configuration Release --no-restore

    - name: Build Windows project with msbuild and ignore COM errors
      run: |
        msbuild RemoteMaster.Host.Windows/RemoteMaster.Host.Windows.csproj /p:Configuration=Release /p:ContinueOnError=true
      continue-on-error: true

    - name: Run tests for non-Windows projects with coverage
      run: |
        dotnet test RemoteMaster.NoWindows.sln --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./TestResults/nonwindows --logger "trx;LogFileName=TestResults.trx"

    - name: Run tests for Windows project with coverage
      run: |
        dotnet test RemoteMaster.Host.Windows.Tests/RemoteMaster.Host.Windows.Tests.csproj --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./TestResults/windows --logger "trx;LogFileName=TestResults.trx"

    - name: List test results and coverage files
      run: |
        dir ./TestResults/
        Get-ChildItem -Path ./TestResults -Recurse | Where-Object { $_.Name -match 'coverage.cobertura.xml' } | Select-Object FullName, LastWriteTime

    - name: Report generator
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:**/coverage.cobertura.xml -targetdir:./TestResults/coverage/report

    - name: List coverage report contents
      run: |
        dir ./TestResults/coverage/
        Get-ChildItem -Path ./TestResults/coverage/ -Recurse

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report
        path: ./TestResults/coverage/report

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./TestResults/**/*.cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

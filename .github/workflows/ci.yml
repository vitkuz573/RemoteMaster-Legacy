name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install npm dependencies for RemoteMaster.Server
      run: |
        cd RemoteMaster.Server
        npm install
        cd ..

    - name: Install .NET dependencies
      run: dotnet restore --ignore-failed-sources --no-cache ./RemoteMaster.sln

    - name: Build
      run: dotnet build --configuration Release --no-restore ./RemoteMaster.sln

    - name: Install Docker Compose
      shell: pwsh
      run: |
        $latestRelease = Invoke-RestMethod -Uri "https://api.github.com/repos/docker/compose/releases/latest"
        $downloadUrl = $latestRelease.assets | Where-Object { $_.name -eq "docker-compose-windows-x86_64.exe" } | Select-Object -ExpandProperty browser_download_url
        if ($null -eq $downloadUrl) {
          Write-Error "Could not find a suitable Docker Compose executable for Windows."
        } else {
          $composePath = "C:\tools"
          if (-not (Test-Path -Path $composePath)) {
            New-Item -ItemType Directory -Path $composePath | Out-Null
          }
          $outputPath = "$composePath\docker-compose.exe"
          Invoke-WebRequest -Uri $downloadUrl -OutFile $outputPath
          [Environment]::SetEnvironmentVariable("Path", $env:Path + ";$composePath", [EnvironmentVariableTarget]::Machine)
        }

    - name: Add Docker Compose to PATH
      shell: pwsh
      run: |
        $composePath = "C:\tools"
        [Environment]::SetEnvironmentVariable("Path", $env:Path + ";$composePath", [EnvironmentVariableTarget]::Process)

    - name: Start LDAP container
      shell: pwsh
      run: ./RemoteMaster.Server.Tests/IntegrationTests/Start-Ldap.ps1

    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity normal ./RemoteMaster.sln

    - name: Stop LDAP container
      if: always()
      shell: pwsh
      run: ./RemoteMaster.Server.Tests/IntegrationTests/Stop-Ldap.ps1
